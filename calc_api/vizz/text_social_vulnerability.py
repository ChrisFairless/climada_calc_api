from string import Template
import logging
from millify import millify
import numpy as np

from calc_api.vizz.util import options_return_period_to_description, options_scenario_to_description
from calc_api.vizz import schemas_widgets
from calc_api.config import ClimadaCalcApiConfig

conf = ClimadaCalcApiConfig()

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(getattr(logging, conf.LOG_LEVEL))


def generate_social_vulnerability_widget_text_no_data(
        hazard_type
):
    return [_generate_social_vulnerability_widget_hazard_overview_text(hazard_type)]


def generate_social_vulnerability_widget_text(
        socvuln_location,
        socvuln_country,
        hazard_type,
        location_name,
):
    intro_text = _generate_social_vulnerability_widget_intro_text()
    haz_overview_text = _generate_social_vulnerability_widget_hazard_overview_text(hazard_type)
    soc_vuln_distribution_text = _generate_social_vulnerability_distribution_text(
        socvuln_location,
        location_name
    )

    # TODO make useful social vulnerability information here
    return [intro_text, haz_overview_text, soc_vuln_distribution_text]


def _generate_social_vulnerability_widget_intro_text():
    text = "Not everyone experiences the effects of climate change equally. Societies are structured giving some groups disproportionate access to resources which in turn affects their vulnerability to extreme events and ability to adapt. "
    return schemas_widgets.GeneratedText(
        template=text,
        values=[]
    )


def _generate_social_vulnerability_widget_hazard_overview_text(hazard_type):
    if hazard_type == 'tropical_cyclone':
        text = "Tropical cyclones have disproportionate effects on the elderly, the disabled, children under the age of 5, migrant communities and people without their own means of transport. These are collectively identified as the population at greater risk to tropical storms and adaptation measures should be targeted accordingly."
    elif hazard_type == 'extreme_heat':
        text = "Extreme heat has disproportionate effects on the elderly, the disabled, children under the age of 5, outdoor workers and indoor workers without cooling, people with co-morbidities, and people unable to cool their homes. These are collectively identified as the population at greater risk to extreme heat and adaptation measures should be targeted accordingly."
    else:
        raise ValueError(f'{hazard_type} is not in my list of pre-prepared hazards for text generation')

    return schemas_widgets.GeneratedText(
        template=text,
        values=[]
    )



def _generate_social_vulnerability_distribution_text(
        soc_vuln,
        location_name):

    # TODO talk about intracommunity vulnerability
    if soc_vuln['n_grid_cells'] <= 8:  # about 200 km2
        distribution_wealthy = Template(
            'In our vulnerability data, $location is too small to talk with confidence about '
            'variations within the community. At these scales community leaders are much better-placed to '
            'identify and serve vulnerable populations when choosing adaptation measures.'
        )
        distribution_wealthy = distribution_wealthy.substitute(location=location_name)
        distribution_wealthy_values = []

    else:
        populated_deciles = [d['decile'] for d in soc_vuln['vulnerability_distribution'] if d['value'] > 0]
        normalised_pop = [d['value']/soc_vuln['total_population'] for d in soc_vuln['vulnerability_distribution']]

        prop_rich = sum(normalised_pop[7:10])
        prop_poor = sum(normalised_pop[0:3])

        # TODO standardise these to a few sentences we can stick together
        if prop_rich > 0.5:
            if prop_poor > 0.3:
                distribution_wealthy = Template(
                    'Our data suggest that $location has a very high number of wealthy areas, but also '
                    'considerably-sized poorer communities. This may be a reflection of large wealth inequalities '
                    'or it could be noisy data. Check against local knowledge and other resources to make sure this '
                    'is right.'
                )
            if prop_poor > 0.15:
                distribution_wealthy = Template(
                    'Our data suggest that $location has a very high number of wealthy areas. But there are still very vulnerable '
                    'neighbourhoods and community members whose vulnerability is unrelated to wealth indicators. '
                    'Selecting and targeting adaptation measures for maximum benefit is particularly important here.'
                )
            else:
                distribution_wealthy = Template(
                    'Our data suggest that $location has a very high number of wealthy areas. But all communities have vulnerable '
                    'individuals who are not visible in the aggregated statistics, or whose vulnerability is unrelated '
                    'to wealth indicators. Selecting and targeting adaptation measures for maximum benefit is '
                    'particularly important here.'
                )

        elif prop_rich > 0.3:
            if prop_poor > 0.3:
                distribution_wealthy = Template(
                    'Our data suggest that $location has a notably high number of wealthy areas. But there are '
                    'still large vulnerable populations as well. When working with large wealth disparities it is '
                    'important to work alongside marginalized communities to make sure that adaptation measures are '
                    'well-targeted.'
                )
            elif prop_poor > 0.15:
                distribution_wealthy = Template(
                    'Our data suggest that $location has a notably high number of wealthy areas. But there are '
                    'very vulnerable populations too. In situations with wealth disparities it is '
                    'important to work alongside marginalized communities to make sure that adaptation measures are '
                    'well-targeted.'
                )
            else:
                distribution_wealthy = Template(
                    'Our data suggest that $location is a fairly affluent location. Most of the population have middle '
                    'or high relative wealth. But all communities have vulnerable '
                    'individuals who are not visible in the aggregated statistics, or whose vulnerability is unrelated '
                    'to wealth indicators. Selecting and targeting adaptation measures for maximum benefit is '
                    'particularly important here.'
                )

        elif prop_rich > 0.15:
            distribution_wealthy = Template(
                'Our data suggest that $location [[SOCVULN PLACEHOLDER]]'
            )

        else:
            distribution_wealthy = Template(
                'Our data suggest that $location [[SOCVULN PLACEHOLDER]]'
            )

        distribution_wealthy = distribution_wealthy.substitute(location=location_name)
        distribution_wealthy_values = []

    # TODO add comparison to country


    return schemas_widgets.GeneratedText(
        template=distribution_wealthy,
        values=distribution_wealthy_values
    )


def _generate_social_vulnerability_country_comparison_text(
        soc_vuln_location,
        soc_vuln_country,
        location_name,
        location_type):
    # TODO provide national context
    if location_type != 'country':
        text = Template(
            'Communities in $location are $vuln_inter_comparison vulnerable than in the whole of $country'
        )

    return None