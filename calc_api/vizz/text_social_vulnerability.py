from string import Template
import logging
from millify import millify
import numpy as np

from calc_api.vizz.util import options_return_period_to_description, options_scenario_to_description
from calc_api.vizz import schemas_widgets
from calc_api.config import ClimadaCalcApiConfig

conf = ClimadaCalcApiConfig()

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(getattr(logging, conf.LOG_LEVEL))

# Set area threshold below which we won't make generalising statements
N_GRIDCELLS_THRESHOLD = 6  # about 200 km2

def generate_social_vulnerability_widget_text_no_data(
        hazard_type
):
    return [_generate_social_vulnerability_widget_hazard_overview_text(hazard_type)]


def generate_social_vulnerability_widget_text(
        socvuln_location,
        socvuln_country,
        hazard_type,
        location_name,
):
    intro_text = _generate_social_vulnerability_widget_intro_text()
    haz_overview_text = _generate_social_vulnerability_widget_hazard_overview_text(hazard_type)
    soc_vuln_distribution_text = _generate_social_vulnerability_distribution_text(
        socvuln_location,
        location_name
    )

    # TODO make useful social vulnerability information here
    return [intro_text, haz_overview_text, soc_vuln_distribution_text]


def _generate_social_vulnerability_widget_intro_text():
    text = "Not everyone experiences the effects of climate change equally. Societies are structured giving some groups disproportionate access to resources which in turn affects their vulnerability to extreme events and ability to adapt. "
    return schemas_widgets.GeneratedText(
        template=text,
        values=[]
    )


def _generate_social_vulnerability_widget_hazard_overview_text(hazard_type):
    if hazard_type == 'tropical_cyclone':
        text = "Tropical cyclones have disproportionate effects on the elderly, the disabled, children under the age of 5, migrant communities and people without their own means of transport. These are collectively identified as the population at greater risk to tropical storms and adaptation measures should be targeted accordingly."
    elif hazard_type == 'extreme_heat':
        text = "Extreme heat has disproportionate effects on the elderly, the disabled, children under the age of 5, outdoor workers and indoor workers without cooling, people with co-morbidities, and people unable to cool their homes. These are collectively identified as the population at greater risk to extreme heat and adaptation measures should be targeted accordingly."
    else:
        raise ValueError(f'{hazard_type} is not in my list of pre-prepared hazards for text generation')

    return schemas_widgets.GeneratedText(
        template=text,
        values=[]
    )



def _generate_social_vulnerability_distribution_text(
        soc_vuln,
        location_name):

    # TODO talk about intracommunity vulnerability
    if soc_vuln['n_grid_cells'] <= N_GRIDCELLS_THRESHOLD:
        distribution_wealthy = Template(
            'In our vulnerability data, $location is too small to talk with confidence about '
            'variations within the community. At these scales community leaders are much better-placed to '
            'identify and serve vulnerable populations when choosing adaptation measures.'
        )
        distribution_wealthy = distribution_wealthy.substitute(location=location_name)
        distribution_wealthy_values = []

        return schemas_widgets.GeneratedText(
            template=distribution_wealthy,
            values=distribution_wealthy_values
        )

    populated_deciles = [d['decile'] for d in soc_vuln['vulnerability_distribution'] if d['value'] > 0]
    normalised_pop = [d['value'] for d in soc_vuln['vulnerability_distribution']]
    absolute_pop = [d['value'] * soc_vuln['total_population'] for d in soc_vuln['vulnerability_distribution']]

    prop_rich = sum(normalised_pop[7:10])
    prop_poor = sum(normalised_pop[0:3])

    # TODO standardise these to a few sentences we can stick together
    if prop_rich > 0.5:
        if prop_poor > 0.3:
            distribution_wealthy = Template(
                'Our data suggest that $location has a very high number of wealthy areas, but also '
                'considerably-sized poorer communities. This may be a reflection of large wealth inequalities '
                'or it could be noisy data. Check against local knowledge and other resources to make sure this '
                'is right. '
            )
        if prop_poor > 0.15:
            distribution_wealthy = Template(
                'Our data suggest that $location has a very high number of wealthy areas. But there are still very vulnerable '
                'neighborhoods and community members whose vulnerability is unrelated to wealth indicators. '
                'Selecting and targeting adaptation measures for maximum benefit is particularly important here. '
            )
        else:
            distribution_wealthy = Template(
                'Our data suggest that $location has a very high number of wealthy areas. But all communities have vulnerable '
                'individuals who are not visible in the aggregated statistics, or whose vulnerability is unrelated '
                'to wealth indicators. Selecting and targeting adaptation measures for maximum benefit is '
                'particularly important here. '
            )

    elif prop_rich > 0.3:
        if prop_poor > 0.3:
            distribution_wealthy = Template(
                'Our data suggest that $location has a notably high number of wealthy areas. But there are '
                'still large vulnerable populations as well. When working with large wealth disparities it is '
                'important to work alongside marginalized communities to make sure that adaptation measures are '
                'well-targeted. '
            )
        elif prop_poor > 0.15:
            distribution_wealthy = Template(
                'Our data suggest that $location has a notably high number of wealthy areas. But there are '
                'very vulnerable populations too. In situations with wealth disparities it is '
                'important to work alongside marginalized communities to make sure that adaptation measures are '
                'well-targeted. '
            )
        else:
            distribution_wealthy = Template(
                'Our data suggest that $location is a fairly affluent location. Most of the population have middle '
                'or high relative wealth. But all communities have vulnerable '
                'individuals who are not visible in the aggregated statistics, or whose vulnerability is unrelated '
                'to wealth indicators. Selecting and targeting adaptation measures for maximum benefit is '
                'particularly important here. '
            )

    elif prop_rich > 0.10:
        if prop_poor > 0.5:
            distribution_wealthy = Template(
                'Our data suggest that $location has a wide mixture of wealth and vulnerabilities. Both rich and '
                'very poor communities are here, but poor communities make up the majority of the population. '
                'Any adaptation measures '
                'will need to take into account the complex needs of these poorer communities, and not all '
                'measures will be suitable, due to the complex, interacting needs in these places. '
            )
        elif prop_poor > 0.3:
            distribution_wealthy = Template(
                'Our data suggest that $location has a wide mixture of wealth and vulnerabilities. Both rich and '
                'very poor communities are here, and poor communities make up a large fraction of the population. '
            )
        else:
            distribution_wealthy = Template(
                'Our data suggest that $location has a wide mixture of wealth and vulnerabilities. Both rich and '
                'very poor communities are here, with the majority of the population in the middle of the wealth '
                'distribution. '
            )
    else:
        if prop_poor > 0.5:
            distribution_wealthy = Template(
                'Our data suggest that $location has a wide mixture of wealth and vulnerabilities. There are few '
                'rich neighborhoods and a large number of vulnerable, poor communities. Any adaptation measures '
                'will need to take into account the complex needs of these poorer communities, and not all '
                'measures will be suitable, due to the complex, interacting needs in these places. '
            )
        elif prop_poor > 0.3:
            distribution_wealthy = Template(
                'Our data suggest that $location has a wide mixture of wealth and vulnerabilities. There are few '
                'rich neighborhoods, some very poor and vulnerable communities, and a broad range in '
                'between.'
            )
        else:
            distribution_wealthy = Template(
                'Our data suggest that $location has a wide mixture of wealth and vulnerabilities. There are a few '
                'rich neighborhoods, some poorer communities, and the majority of the population in the middle '
                'of the wealth distribution. '
            )

        distribution_wealthy = distribution_wealthy.substitute(location=location_name)
        distribution_wealthy_values = []

    # TODO add comparison to country
    return schemas_widgets.GeneratedText(
        template=distribution_wealthy,
        values=distribution_wealthy_values
    )


def _generate_social_vulnerability_country_comparison_text(
        soc_vuln_location,
        soc_vuln_country,
        location_name,
        location_type):
    # TODO provide national context

    # Don't generalise if we're not covering enough grid cells
    if soc_vuln_location['n_grid_cells'] <= N_GRIDCELLS_THRESHOLD:
        # TODO say a little more here. Even small communities can be placed in context
        return schemas_widgets.GeneratedText(template='', values=[])

    # Don't compare to the country if the location has >90% of the national population already
    if soc_vuln_location['total_population']/soc_vuln_country['total_population'] > 0.9:
        return schemas_widgets.GeneratedText(template='', values=[])

    normalised_pop_location = [d['value'] for d in soc_vuln_location['vulnerability_distribution']]
    normalised_pop_country = [d['value'] for d in soc_vuln_country['vulnerability_distribution']]

    prop_rich = sum(normalised_pop_location[7:10])
    prop_poor = sum(normalised_pop_location[0:3])
    prop_poor_country = sum(normalised_pop_country[0:3])

    pop_diff = [
        d_loc['value'] - d_country['value']
        for d_loc, d_country
        in zip(soc_vuln_location['vulnerability_distribution'], soc_vuln_country['vulnerability_distribution'])
    ]
    diff_rich = sum(pop_diff[7:10])
    diff_poor = sum(pop_diff[0:3])

    if diff_rich > 0.2:
        if diff_poor > 0.1:
            text_country_comparison = Template(
                'Compared to the rest of the country, $location has a much wider wealth inequality, with larger rich '
                'and larger poor communities. '
            )
        elif diff_poor > -0.1:
            text_country_comparison = Template(
                'Compared to the rest of the country, $location is much wealthier, with larger rich communities and '
                'a comparable poor community. '
            )
        else:
            if prop_poor < 0.1 < prop_poor_country:
                text_country_comparison = Template(
                    'Compared to the rest of the country, $location is much wealthier, with a large proportion of rich '
                    'people, and very few poorer communities. '
                )
            else:
                text_country_comparison = Template(
                    'Compared to the rest of the country, $location is much wealthier, with a large proportion of rich '
                    'people, and a lower proportion of poorer communities. '
                )
    elif diff_rich > 0.05:
        if diff_poor > 0.3:
            text_country_comparison = Template(
                'Compared to the rest of the country, $location has a much wider wealth inequality, with '
                'larger rich and much larger poor communities. '
            )
        elif diff_poor > 0.1:
            text_country_comparison = Template(
                'Compared to the rest of the country, $location has wider wealth inequality, with slightly larger rich '
                'and larger poor communities. '
            )
        elif diff_poor > -0.1:
            text_country_comparison = Template(
                'Compared to the rest of the country, $location is a bit wealthier, with larger rich communities and '
                'a comparable poor community. '
            )
        else:
            if prop_poor < 0.1 < prop_poor_country:
                text_country_comparison = Template(
                    'Compared to the rest of the country, $location is wealthier, with a larger proportion of rich '
                    'people, and very few very poor communities. '
                )
            else:
                text_country_comparison = Template(
                    'Compared to the rest of the country, $location is wealthier, with a larger proportion of rich '
                    'people, and a lower proportion of poorer communities. '
                )
    elif diff_rich > -0.05:
        if diff_poor > 0.3:
            text_country_comparison = Template(
                'Compared to the rest of the country, $location has much poorer communities. '
            )
        elif diff_poor > 0.1:
            text_country_comparison = Template(
                'Compared to the rest of the country, $location has poorer communities. '
            )
        elif diff_poor > -0.1:
            text_country_comparison = Template(
                'Compared to the rest of the country, $location has a similar distribution of wealthy and less wealthy '
                'communities. '
            )
        else:
            if prop_poor < 0.1 < prop_poor_country:
                text_country_comparison = Template(
                    'Compared to the rest of the country, $location has very few poor communities. '
                )
            else:
                text_country_comparison = Template(
                    'Compared to the rest of the country, $location has fewer very poor communities. '
                )
    elif diff_rich > -0.15:
        if diff_poor > 0.3:
            text_country_comparison = Template(
                'Compared to the rest of the country, $location has much fewer rich communities and '
                'much more poorer communities. '
            )
        elif diff_poor > 0.1:
            text_country_comparison = Template(
                'Compared to the rest of the country, $location has much fewer rich communities and '
                'more poorer communities. '
            )
        elif diff_poor > -0.1:
            text_country_comparison = Template(
                'Compared to the rest of the country, $location has less wealth inequality, with '
                'much fewer rich communities and a comparable '
                'number of very poor communities. '
            )
        else:
            if prop_poor < 0.1 < prop_poor_country:
                text_country_comparison = Template(
                    'Compared to the rest of the country, $location has less wealth inequality, with much fewer rich '
                    'communities, and very few poor communities. '
                )
            else:
                text_country_comparison = Template(
                    'Compared to the rest of the country, $location has less wealth inequality, with much fewer rich '
                    'communities and fewer very poor communities. '
                )

    text_country_comparison = text_country_comparison.substitute(location=location_name)
    text_country_comparison_values = []

    return schemas_widgets.GeneratedText(
        template=text_country_comparison,
        values=text_country_comparison_values
    )

    return None